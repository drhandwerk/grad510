
/******************************************************************************/
/**
 * \file IntVect.cpp
 *
 * \brief Non-inline definitions for classes in IntVect.H
 *
 *//*+*************************************************************************/

#include "IntVect.H"


/*******************************************************************************
 *
 * Class IntVect: static member initialization
 *
 ******************************************************************************/

const IntVect IntVect::Zero(D_DECL(0, 0, 0));
const IntVect IntVect::Unit(D_DECL(1, 1, 1));


/*******************************************************************************
 *
 * Class IntVect: member definitions
 *
 ******************************************************************************/

/*--------------------------------------------------------------------*/
//  Default constructor
/*--------------------------------------------------------------------*/

IntVect::IntVect()
  : m_data({{ D_DECL(0, 0, 0) }})
{
}

/*--------------------------------------------------------------------*/
//  Constructor with values
/** \param[in] a_i#     Initial values
 *//*-----------------------------------------------------------------*/

IntVect::IntVect(D_DECL(const int a_i0, const int a_i1, const int a_i2))
  : m_data({{ D_DECL(a_i0, a_i1, a_i2) }})
{
}


/*******************************************************************************
 *
 * Class IntVect: external related functions
 *
 ******************************************************************************/

/*--------------------------------------------------------------------*/
//  Output the IntVect
/** \param[in] a_os     The output stream
 *  \param[in] a_iv     IntVect to output
 *  \return             The output stream
 *//*-----------------------------------------------------------------*/

std::ostream &operator<<(std::ostream &a_os, const IntVect &a_iv)
{
  a_os << '('
    D_TERM(<< a_iv[0], << ", " << a_iv[1], << ", " << a_iv[2])
       << ')';
  return a_os;
}
